// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace yantk {
class NetDesc;
class NetDescDefaultTypeInternal;
extern NetDescDefaultTypeInternal _NetDesc_default_instance_;
}  // namespace yantk

namespace yantk {

namespace protobuf_net_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_net_2eproto

enum NetDesc_NonlinearityType {
  NetDesc_NonlinearityType_SIGMOID = 0,
  NetDesc_NonlinearityType_TANH = 1,
  NetDesc_NonlinearityType_RELU = 2
};
bool NetDesc_NonlinearityType_IsValid(int value);
const NetDesc_NonlinearityType NetDesc_NonlinearityType_NonlinearityType_MIN = NetDesc_NonlinearityType_SIGMOID;
const NetDesc_NonlinearityType NetDesc_NonlinearityType_NonlinearityType_MAX = NetDesc_NonlinearityType_RELU;
const int NetDesc_NonlinearityType_NonlinearityType_ARRAYSIZE = NetDesc_NonlinearityType_NonlinearityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetDesc_NonlinearityType_descriptor();
inline const ::std::string& NetDesc_NonlinearityType_Name(NetDesc_NonlinearityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetDesc_NonlinearityType_descriptor(), value);
}
inline bool NetDesc_NonlinearityType_Parse(
    const ::std::string& name, NetDesc_NonlinearityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetDesc_NonlinearityType>(
    NetDesc_NonlinearityType_descriptor(), name, value);
}
// ===================================================================

class NetDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yantk.NetDesc) */ {
 public:
  NetDesc();
  virtual ~NetDesc();

  NetDesc(const NetDesc& from);

  inline NetDesc& operator=(const NetDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetDesc(NetDesc&& from) noexcept
    : NetDesc() {
    *this = ::std::move(from);
  }

  inline NetDesc& operator=(NetDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetDesc& default_instance();

  static inline const NetDesc* internal_default_instance() {
    return reinterpret_cast<const NetDesc*>(
               &_NetDesc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetDesc* other);
  friend void swap(NetDesc& a, NetDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetDesc* New() const PROTOBUF_FINAL { return New(NULL); }

  NetDesc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetDesc& from);
  void MergeFrom(const NetDesc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetDesc_NonlinearityType NonlinearityType;
  static const NonlinearityType SIGMOID =
    NetDesc_NonlinearityType_SIGMOID;
  static const NonlinearityType TANH =
    NetDesc_NonlinearityType_TANH;
  static const NonlinearityType RELU =
    NetDesc_NonlinearityType_RELU;
  static inline bool NonlinearityType_IsValid(int value) {
    return NetDesc_NonlinearityType_IsValid(value);
  }
  static const NonlinearityType NonlinearityType_MIN =
    NetDesc_NonlinearityType_NonlinearityType_MIN;
  static const NonlinearityType NonlinearityType_MAX =
    NetDesc_NonlinearityType_NonlinearityType_MAX;
  static const int NonlinearityType_ARRAYSIZE =
    NetDesc_NonlinearityType_NonlinearityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NonlinearityType_descriptor() {
    return NetDesc_NonlinearityType_descriptor();
  }
  static inline const ::std::string& NonlinearityType_Name(NonlinearityType value) {
    return NetDesc_NonlinearityType_Name(value);
  }
  static inline bool NonlinearityType_Parse(const ::std::string& name,
      NonlinearityType* value) {
    return NetDesc_NonlinearityType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string output_weights_file = 6 [default = "weights.out"];
  bool has_output_weights_file() const;
  void clear_output_weights_file();
  static const int kOutputWeightsFileFieldNumber = 6;
  const ::std::string& output_weights_file() const;
  void set_output_weights_file(const ::std::string& value);
  #if LANG_CXX11
  void set_output_weights_file(::std::string&& value);
  #endif
  void set_output_weights_file(const char* value);
  void set_output_weights_file(const char* value, size_t size);
  ::std::string* mutable_output_weights_file();
  ::std::string* release_output_weights_file();
  void set_allocated_output_weights_file(::std::string* output_weights_file);

  // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
  bool has_nonlinearity() const;
  void clear_nonlinearity();
  static const int kNonlinearityFieldNumber = 2;
  ::yantk::NetDesc_NonlinearityType nonlinearity() const;
  void set_nonlinearity(::yantk::NetDesc_NonlinearityType value);

  // optional bool batch = 4 [default = false];
  bool has_batch() const;
  void clear_batch();
  static const int kBatchFieldNumber = 4;
  bool batch() const;
  void set_batch(bool value);

  // optional int32 report_frequency = 5 [default = 10000];
  bool has_report_frequency() const;
  void clear_report_frequency();
  static const int kReportFrequencyFieldNumber = 5;
  ::google::protobuf::int32 report_frequency() const;
  void set_report_frequency(::google::protobuf::int32 value);

  // optional int32 num_iterations = 1 [default = 1];
  bool has_num_iterations() const;
  void clear_num_iterations();
  static const int kNumIterationsFieldNumber = 1;
  ::google::protobuf::int32 num_iterations() const;
  void set_num_iterations(::google::protobuf::int32 value);

  // optional float learning_rate = 3 [default = 0.1];
  bool has_learning_rate() const;
  void clear_learning_rate();
  static const int kLearningRateFieldNumber = 3;
  float learning_rate() const;
  void set_learning_rate(float value);

  // @@protoc_insertion_point(class_scope:yantk.NetDesc)
 private:
  void set_has_num_iterations();
  void clear_has_num_iterations();
  void set_has_nonlinearity();
  void clear_has_nonlinearity();
  void set_has_learning_rate();
  void clear_has_learning_rate();
  void set_has_batch();
  void clear_has_batch();
  void set_has_report_frequency();
  void clear_has_report_frequency();
  void set_has_output_weights_file();
  void clear_has_output_weights_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_output_weights_file_;
  ::google::protobuf::internal::ArenaStringPtr output_weights_file_;
  int nonlinearity_;
  bool batch_;
  ::google::protobuf::int32 report_frequency_;
  ::google::protobuf::int32 num_iterations_;
  float learning_rate_;
  friend struct protobuf_net_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetDesc

// optional int32 num_iterations = 1 [default = 1];
inline bool NetDesc::has_num_iterations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetDesc::set_has_num_iterations() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetDesc::clear_has_num_iterations() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetDesc::clear_num_iterations() {
  num_iterations_ = 1;
  clear_has_num_iterations();
}
inline ::google::protobuf::int32 NetDesc::num_iterations() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.num_iterations)
  return num_iterations_;
}
inline void NetDesc::set_num_iterations(::google::protobuf::int32 value) {
  set_has_num_iterations();
  num_iterations_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.num_iterations)
}

// optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
inline bool NetDesc::has_nonlinearity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetDesc::set_has_nonlinearity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetDesc::clear_has_nonlinearity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetDesc::clear_nonlinearity() {
  nonlinearity_ = 0;
  clear_has_nonlinearity();
}
inline ::yantk::NetDesc_NonlinearityType NetDesc::nonlinearity() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.nonlinearity)
  return static_cast< ::yantk::NetDesc_NonlinearityType >(nonlinearity_);
}
inline void NetDesc::set_nonlinearity(::yantk::NetDesc_NonlinearityType value) {
  assert(::yantk::NetDesc_NonlinearityType_IsValid(value));
  set_has_nonlinearity();
  nonlinearity_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.nonlinearity)
}

// optional float learning_rate = 3 [default = 0.1];
inline bool NetDesc::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetDesc::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetDesc::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetDesc::clear_learning_rate() {
  learning_rate_ = 0.1f;
  clear_has_learning_rate();
}
inline float NetDesc::learning_rate() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.learning_rate)
  return learning_rate_;
}
inline void NetDesc::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.learning_rate)
}

// optional bool batch = 4 [default = false];
inline bool NetDesc::has_batch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetDesc::set_has_batch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetDesc::clear_has_batch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetDesc::clear_batch() {
  batch_ = false;
  clear_has_batch();
}
inline bool NetDesc::batch() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.batch)
  return batch_;
}
inline void NetDesc::set_batch(bool value) {
  set_has_batch();
  batch_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.batch)
}

// optional int32 report_frequency = 5 [default = 10000];
inline bool NetDesc::has_report_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetDesc::set_has_report_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetDesc::clear_has_report_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetDesc::clear_report_frequency() {
  report_frequency_ = 10000;
  clear_has_report_frequency();
}
inline ::google::protobuf::int32 NetDesc::report_frequency() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.report_frequency)
  return report_frequency_;
}
inline void NetDesc::set_report_frequency(::google::protobuf::int32 value) {
  set_has_report_frequency();
  report_frequency_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.report_frequency)
}

// optional string output_weights_file = 6 [default = "weights.out"];
inline bool NetDesc::has_output_weights_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetDesc::set_has_output_weights_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetDesc::clear_has_output_weights_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetDesc::clear_output_weights_file() {
  output_weights_file_.ClearToDefaultNoArena(&NetDesc::_default_output_weights_file_.get());
  clear_has_output_weights_file();
}
inline const ::std::string& NetDesc::output_weights_file() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.output_weights_file)
  return output_weights_file_.GetNoArena();
}
inline void NetDesc::set_output_weights_file(const ::std::string& value) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(), value);
  // @@protoc_insertion_point(field_set:yantk.NetDesc.output_weights_file)
}
#if LANG_CXX11
inline void NetDesc::set_output_weights_file(::std::string&& value) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(
    &NetDesc::_default_output_weights_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yantk.NetDesc.output_weights_file)
}
#endif
inline void NetDesc::set_output_weights_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yantk.NetDesc.output_weights_file)
}
inline void NetDesc::set_output_weights_file(const char* value, size_t size) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yantk.NetDesc.output_weights_file)
}
inline ::std::string* NetDesc::mutable_output_weights_file() {
  set_has_output_weights_file();
  // @@protoc_insertion_point(field_mutable:yantk.NetDesc.output_weights_file)
  return output_weights_file_.MutableNoArena(&NetDesc::_default_output_weights_file_.get());
}
inline ::std::string* NetDesc::release_output_weights_file() {
  // @@protoc_insertion_point(field_release:yantk.NetDesc.output_weights_file)
  clear_has_output_weights_file();
  return output_weights_file_.ReleaseNoArena(&NetDesc::_default_output_weights_file_.get());
}
inline void NetDesc::set_allocated_output_weights_file(::std::string* output_weights_file) {
  if (output_weights_file != NULL) {
    set_has_output_weights_file();
  } else {
    clear_has_output_weights_file();
  }
  output_weights_file_.SetAllocatedNoArena(&NetDesc::_default_output_weights_file_.get(), output_weights_file);
  // @@protoc_insertion_point(field_set_allocated:yantk.NetDesc.output_weights_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace yantk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::yantk::NetDesc_NonlinearityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yantk::NetDesc_NonlinearityType>() {
  return ::yantk::NetDesc_NonlinearityType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
