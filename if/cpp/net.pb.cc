// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yantk {
class NetDescDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetDesc>
     _instance;
} _NetDesc_default_instance_;

namespace protobuf_net_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, num_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, nonlinearity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, report_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDesc, output_weights_file_),
  4,
  1,
  5,
  2,
  3,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(NetDesc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetDesc_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "net.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  NetDesc::_default_output_weights_file_.DefaultConstruct();
  *NetDesc::_default_output_weights_file_.get_mutable() = ::std::string("weights.out", 11);
  ::google::protobuf::internal::OnShutdownDestroyString(
      NetDesc::_default_output_weights_file_.get_mutable());
  _NetDesc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetDesc_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tnet.proto\022\005yantk\"\226\002\n\007NetDesc\022\031\n\016num_it"
      "erations\030\001 \001(\005:\0011\022>\n\014nonlinearity\030\002 \001(\0162"
      "\037.yantk.NetDesc.NonlinearityType:\007SIGMOI"
      "D\022\032\n\rlearning_rate\030\003 \001(\002:\0030.1\022\024\n\005batch\030\004"
      " \001(\010:\005false\022\037\n\020report_frequency\030\005 \001(\005:\0051"
      "0000\022(\n\023output_weights_file\030\006 \001(\t:\013weigh"
      "ts.out\"3\n\020NonlinearityType\022\013\n\007SIGMOID\020\000\022"
      "\010\n\004TANH\020\001\022\010\n\004RELU\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_net_2eproto

const ::google::protobuf::EnumDescriptor* NetDesc_NonlinearityType_descriptor() {
  protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_net_2eproto::file_level_enum_descriptors[0];
}
bool NetDesc_NonlinearityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetDesc_NonlinearityType NetDesc::SIGMOID;
const NetDesc_NonlinearityType NetDesc::TANH;
const NetDesc_NonlinearityType NetDesc::RELU;
const NetDesc_NonlinearityType NetDesc::NonlinearityType_MIN;
const NetDesc_NonlinearityType NetDesc::NonlinearityType_MAX;
const int NetDesc::NonlinearityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetDesc::_default_output_weights_file_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetDesc::kNumIterationsFieldNumber;
const int NetDesc::kNonlinearityFieldNumber;
const int NetDesc::kLearningRateFieldNumber;
const int NetDesc::kBatchFieldNumber;
const int NetDesc::kReportFrequencyFieldNumber;
const int NetDesc::kOutputWeightsFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetDesc::NetDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yantk.NetDesc)
}
NetDesc::NetDesc(const NetDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_weights_file_.UnsafeSetDefault(&NetDesc::_default_output_weights_file_.get());
  if (from.has_output_weights_file()) {
    output_weights_file_.AssignWithDefault(&NetDesc::_default_output_weights_file_.get(), from.output_weights_file_);
  }
  ::memcpy(&nonlinearity_, &from.nonlinearity_,
    static_cast<size_t>(reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&nonlinearity_)) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:yantk.NetDesc)
}

void NetDesc::SharedCtor() {
  _cached_size_ = 0;
  output_weights_file_.UnsafeSetDefault(&NetDesc::_default_output_weights_file_.get());
  ::memset(&nonlinearity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_) -
      reinterpret_cast<char*>(&nonlinearity_)) + sizeof(batch_));
  report_frequency_ = 10000;
  num_iterations_ = 1;
  learning_rate_ = 0.1f;
}

NetDesc::~NetDesc() {
  // @@protoc_insertion_point(destructor:yantk.NetDesc)
  SharedDtor();
}

void NetDesc::SharedDtor() {
  output_weights_file_.DestroyNoArena(&NetDesc::_default_output_weights_file_.get());
}

void NetDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDesc::descriptor() {
  protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_net_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetDesc& NetDesc::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetDesc* NetDesc::New(::google::protobuf::Arena* arena) const {
  NetDesc* n = new NetDesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_output_weights_file()) {
    GOOGLE_DCHECK(!output_weights_file_.IsDefault(&NetDesc::_default_output_weights_file_.get()));
    (*output_weights_file_.UnsafeRawStringPointer())->assign(*&NetDesc::_default_output_weights_file_.get());
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&nonlinearity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_) -
        reinterpret_cast<char*>(&nonlinearity_)) + sizeof(batch_));
    report_frequency_ = 10000;
    num_iterations_ = 1;
    learning_rate_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yantk.NetDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_iterations = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yantk::NetDesc_NonlinearityType_IsValid(value)) {
            set_nonlinearity(static_cast< ::yantk::NetDesc_NonlinearityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float learning_rate = 3 [default = 0.1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_learning_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool batch = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_frequency = 5 [default = 10000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_report_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string output_weights_file = 6 [default = "weights.out"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_weights_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_weights_file().data(), static_cast<int>(this->output_weights_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yantk.NetDesc.output_weights_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yantk.NetDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yantk.NetDesc)
  return false;
#undef DO_
}

void NetDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_iterations = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_iterations(), output);
  }

  // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nonlinearity(), output);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->learning_rate(), output);
  }

  // optional bool batch = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->batch(), output);
  }

  // optional int32 report_frequency = 5 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->report_frequency(), output);
  }

  // optional string output_weights_file = 6 [default = "weights.out"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_weights_file().data(), static_cast<int>(this->output_weights_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yantk.NetDesc.output_weights_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->output_weights_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yantk.NetDesc)
}

::google::protobuf::uint8* NetDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_iterations = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_iterations(), target);
  }

  // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nonlinearity(), target);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->learning_rate(), target);
  }

  // optional bool batch = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->batch(), target);
  }

  // optional int32 report_frequency = 5 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->report_frequency(), target);
  }

  // optional string output_weights_file = 6 [default = "weights.out"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_weights_file().data(), static_cast<int>(this->output_weights_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yantk.NetDesc.output_weights_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->output_weights_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yantk.NetDesc)
  return target;
}

size_t NetDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yantk.NetDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string output_weights_file = 6 [default = "weights.out"];
    if (has_output_weights_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_weights_file());
    }

    // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
    if (has_nonlinearity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nonlinearity());
    }

    // optional bool batch = 4 [default = false];
    if (has_batch()) {
      total_size += 1 + 1;
    }

    // optional int32 report_frequency = 5 [default = 10000];
    if (has_report_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_frequency());
    }

    // optional int32 num_iterations = 1 [default = 1];
    if (has_num_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_iterations());
    }

    // optional float learning_rate = 3 [default = 0.1];
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yantk.NetDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const NetDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yantk.NetDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yantk.NetDesc)
    MergeFrom(*source);
  }
}

void NetDesc::MergeFrom(const NetDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yantk.NetDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_output_weights_file();
      output_weights_file_.AssignWithDefault(&NetDesc::_default_output_weights_file_.get(), from.output_weights_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      nonlinearity_ = from.nonlinearity_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_ = from.batch_;
    }
    if (cached_has_bits & 0x00000008u) {
      report_frequency_ = from.report_frequency_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_iterations_ = from.num_iterations_;
    }
    if (cached_has_bits & 0x00000020u) {
      learning_rate_ = from.learning_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yantk.NetDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDesc::CopyFrom(const NetDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yantk.NetDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDesc::IsInitialized() const {
  return true;
}

void NetDesc::Swap(NetDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetDesc::InternalSwap(NetDesc* other) {
  using std::swap;
  output_weights_file_.Swap(&other->output_weights_file_);
  swap(nonlinearity_, other->nonlinearity_);
  swap(batch_, other->batch_);
  swap(report_frequency_, other->report_frequency_);
  swap(num_iterations_, other->num_iterations_);
  swap(learning_rate_, other->learning_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetDesc::GetMetadata() const {
  protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_net_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetDesc

// optional int32 num_iterations = 1 [default = 1];
bool NetDesc::has_num_iterations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetDesc::set_has_num_iterations() {
  _has_bits_[0] |= 0x00000010u;
}
void NetDesc::clear_has_num_iterations() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetDesc::clear_num_iterations() {
  num_iterations_ = 1;
  clear_has_num_iterations();
}
::google::protobuf::int32 NetDesc::num_iterations() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.num_iterations)
  return num_iterations_;
}
void NetDesc::set_num_iterations(::google::protobuf::int32 value) {
  set_has_num_iterations();
  num_iterations_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.num_iterations)
}

// optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
bool NetDesc::has_nonlinearity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetDesc::set_has_nonlinearity() {
  _has_bits_[0] |= 0x00000002u;
}
void NetDesc::clear_has_nonlinearity() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetDesc::clear_nonlinearity() {
  nonlinearity_ = 0;
  clear_has_nonlinearity();
}
::yantk::NetDesc_NonlinearityType NetDesc::nonlinearity() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.nonlinearity)
  return static_cast< ::yantk::NetDesc_NonlinearityType >(nonlinearity_);
}
void NetDesc::set_nonlinearity(::yantk::NetDesc_NonlinearityType value) {
  assert(::yantk::NetDesc_NonlinearityType_IsValid(value));
  set_has_nonlinearity();
  nonlinearity_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.nonlinearity)
}

// optional float learning_rate = 3 [default = 0.1];
bool NetDesc::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetDesc::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void NetDesc::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetDesc::clear_learning_rate() {
  learning_rate_ = 0.1f;
  clear_has_learning_rate();
}
float NetDesc::learning_rate() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.learning_rate)
  return learning_rate_;
}
void NetDesc::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.learning_rate)
}

// optional bool batch = 4 [default = false];
bool NetDesc::has_batch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetDesc::set_has_batch() {
  _has_bits_[0] |= 0x00000004u;
}
void NetDesc::clear_has_batch() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetDesc::clear_batch() {
  batch_ = false;
  clear_has_batch();
}
bool NetDesc::batch() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.batch)
  return batch_;
}
void NetDesc::set_batch(bool value) {
  set_has_batch();
  batch_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.batch)
}

// optional int32 report_frequency = 5 [default = 10000];
bool NetDesc::has_report_frequency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetDesc::set_has_report_frequency() {
  _has_bits_[0] |= 0x00000008u;
}
void NetDesc::clear_has_report_frequency() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetDesc::clear_report_frequency() {
  report_frequency_ = 10000;
  clear_has_report_frequency();
}
::google::protobuf::int32 NetDesc::report_frequency() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.report_frequency)
  return report_frequency_;
}
void NetDesc::set_report_frequency(::google::protobuf::int32 value) {
  set_has_report_frequency();
  report_frequency_ = value;
  // @@protoc_insertion_point(field_set:yantk.NetDesc.report_frequency)
}

// optional string output_weights_file = 6 [default = "weights.out"];
bool NetDesc::has_output_weights_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetDesc::set_has_output_weights_file() {
  _has_bits_[0] |= 0x00000001u;
}
void NetDesc::clear_has_output_weights_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetDesc::clear_output_weights_file() {
  output_weights_file_.ClearToDefaultNoArena(&NetDesc::_default_output_weights_file_.get());
  clear_has_output_weights_file();
}
const ::std::string& NetDesc::output_weights_file() const {
  // @@protoc_insertion_point(field_get:yantk.NetDesc.output_weights_file)
  return output_weights_file_.GetNoArena();
}
void NetDesc::set_output_weights_file(const ::std::string& value) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(), value);
  // @@protoc_insertion_point(field_set:yantk.NetDesc.output_weights_file)
}
#if LANG_CXX11
void NetDesc::set_output_weights_file(::std::string&& value) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(
    &NetDesc::_default_output_weights_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yantk.NetDesc.output_weights_file)
}
#endif
void NetDesc::set_output_weights_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yantk.NetDesc.output_weights_file)
}
void NetDesc::set_output_weights_file(const char* value, size_t size) {
  set_has_output_weights_file();
  output_weights_file_.SetNoArena(&NetDesc::_default_output_weights_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yantk.NetDesc.output_weights_file)
}
::std::string* NetDesc::mutable_output_weights_file() {
  set_has_output_weights_file();
  // @@protoc_insertion_point(field_mutable:yantk.NetDesc.output_weights_file)
  return output_weights_file_.MutableNoArena(&NetDesc::_default_output_weights_file_.get());
}
::std::string* NetDesc::release_output_weights_file() {
  // @@protoc_insertion_point(field_release:yantk.NetDesc.output_weights_file)
  clear_has_output_weights_file();
  return output_weights_file_.ReleaseNoArena(&NetDesc::_default_output_weights_file_.get());
}
void NetDesc::set_allocated_output_weights_file(::std::string* output_weights_file) {
  if (output_weights_file != NULL) {
    set_has_output_weights_file();
  } else {
    clear_has_output_weights_file();
  }
  output_weights_file_.SetAllocatedNoArena(&NetDesc::_default_output_weights_file_.get(), output_weights_file);
  // @@protoc_insertion_point(field_set_allocated:yantk.NetDesc.output_weights_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yantk

// @@protoc_insertion_point(global_scope)
