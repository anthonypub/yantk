// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace yantk {
class NetDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetDesc>
      _instance;
} _NetDesc_default_instance_;
}  // namespace yantk
namespace protobuf_net_2eproto {
void InitDefaultsNetDescImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::yantk::_NetDesc_default_instance_;
    new (ptr) ::yantk::NetDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::yantk::NetDesc::InitAsDefaultInstance();
}

void InitDefaultsNetDesc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetDescImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, num_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, nonlinearity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::yantk::NetDesc, batch_),
  2,
  0,
  3,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::yantk::NetDesc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::yantk::_NetDesc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "net.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tnet.proto\022\005yantk\"\313\001\n\007NetDesc\022\031\n\016num_it"
      "erations\030\001 \001(\005:\0011\022>\n\014nonlinearity\030\002 \001(\0162"
      "\037.yantk.NetDesc.NonlinearityType:\007SIGMOI"
      "D\022\032\n\rlearning_rate\030\003 \001(\002:\0030.1\022\024\n\005batch\030\004"
      " \001(\010:\005false\"3\n\020NonlinearityType\022\013\n\007SIGMO"
      "ID\020\000\022\010\n\004TANH\020\001\022\010\n\004RELU\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_net_2eproto
namespace yantk {
const ::google::protobuf::EnumDescriptor* NetDesc_NonlinearityType_descriptor() {
  protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_net_2eproto::file_level_enum_descriptors[0];
}
bool NetDesc_NonlinearityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetDesc_NonlinearityType NetDesc::SIGMOID;
const NetDesc_NonlinearityType NetDesc::TANH;
const NetDesc_NonlinearityType NetDesc::RELU;
const NetDesc_NonlinearityType NetDesc::NonlinearityType_MIN;
const NetDesc_NonlinearityType NetDesc::NonlinearityType_MAX;
const int NetDesc::NonlinearityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NetDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetDesc::kNumIterationsFieldNumber;
const int NetDesc::kNonlinearityFieldNumber;
const int NetDesc::kLearningRateFieldNumber;
const int NetDesc::kBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetDesc::NetDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_net_2eproto::InitDefaultsNetDesc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yantk.NetDesc)
}
NetDesc::NetDesc(const NetDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nonlinearity_, &from.nonlinearity_,
    static_cast<size_t>(reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&nonlinearity_)) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:yantk.NetDesc)
}

void NetDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nonlinearity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_) -
      reinterpret_cast<char*>(&nonlinearity_)) + sizeof(batch_));
  num_iterations_ = 1;
  learning_rate_ = 0.1f;
}

NetDesc::~NetDesc() {
  // @@protoc_insertion_point(destructor:yantk.NetDesc)
  SharedDtor();
}

void NetDesc::SharedDtor() {
}

void NetDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDesc::descriptor() {
  ::protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetDesc& NetDesc::default_instance() {
  ::protobuf_net_2eproto::InitDefaultsNetDesc();
  return *internal_default_instance();
}


void NetDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&nonlinearity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_) -
        reinterpret_cast<char*>(&nonlinearity_)) + sizeof(batch_));
    num_iterations_ = 1;
    learning_rate_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yantk.NetDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_iterations = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::yantk::NetDesc_NonlinearityType_IsValid(value)) {
            set_nonlinearity(static_cast< ::yantk::NetDesc_NonlinearityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float learning_rate = 3 [default = 0.1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_learning_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool batch = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yantk.NetDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yantk.NetDesc)
  return false;
#undef DO_
}

void NetDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_iterations = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_iterations(), output);
  }

  // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nonlinearity(), output);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->learning_rate(), output);
  }

  // optional bool batch = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->batch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yantk.NetDesc)
}

::google::protobuf::uint8* NetDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yantk.NetDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_iterations = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_iterations(), target);
  }

  // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nonlinearity(), target);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->learning_rate(), target);
  }

  // optional bool batch = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->batch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yantk.NetDesc)
  return target;
}

size_t NetDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yantk.NetDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .yantk.NetDesc.NonlinearityType nonlinearity = 2 [default = SIGMOID];
    if (has_nonlinearity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nonlinearity());
    }

    // optional bool batch = 4 [default = false];
    if (has_batch()) {
      total_size += 1 + 1;
    }

    // optional int32 num_iterations = 1 [default = 1];
    if (has_num_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_iterations());
    }

    // optional float learning_rate = 3 [default = 0.1];
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yantk.NetDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const NetDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yantk.NetDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yantk.NetDesc)
    MergeFrom(*source);
  }
}

void NetDesc::MergeFrom(const NetDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yantk.NetDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      nonlinearity_ = from.nonlinearity_;
    }
    if (cached_has_bits & 0x00000002u) {
      batch_ = from.batch_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_iterations_ = from.num_iterations_;
    }
    if (cached_has_bits & 0x00000008u) {
      learning_rate_ = from.learning_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yantk.NetDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDesc::CopyFrom(const NetDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yantk.NetDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDesc::IsInitialized() const {
  return true;
}

void NetDesc::Swap(NetDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetDesc::InternalSwap(NetDesc* other) {
  using std::swap;
  swap(nonlinearity_, other->nonlinearity_);
  swap(batch_, other->batch_);
  swap(num_iterations_, other->num_iterations_);
  swap(learning_rate_, other->learning_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetDesc::GetMetadata() const {
  protobuf_net_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_net_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace yantk
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::yantk::NetDesc* Arena::Create< ::yantk::NetDesc >(Arena* arena) {
  return Arena::CreateInternal< ::yantk::NetDesc >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
