// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weights.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weights.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yantk {
class WeightsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Weights>
     _instance;
} _Weights_default_instance_;
class IterationWeightsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IterationWeights>
     _instance;
} _IterationWeights_default_instance_;
class TrainingWeightsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrainingWeights>
     _instance;
} _TrainingWeights_default_instance_;

namespace protobuf_weights_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_h_00_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_h_01_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_h_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_h_11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, b_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, b_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_o_00_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_o_01_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_o_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weights, w_o_11_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterationWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterationWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterationWeights, iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterationWeights, weights_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingWeights, iteration_weights_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(Weights)},
  { 25, 32, sizeof(IterationWeights)},
  { 34, 40, sizeof(TrainingWeights)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Weights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IterationWeights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrainingWeights_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "weights.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Weights_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Weights_default_instance_);_IterationWeights_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IterationWeights_default_instance_);_TrainingWeights_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrainingWeights_default_instance_);_IterationWeights_default_instance_._instance.get_mutable()->weights_ = const_cast< ::yantk::Weights*>(
      ::yantk::Weights::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rweights.proto\022\005yantk\"\243\001\n\007Weights\022\016\n\006w_"
      "h_00\030\001 \002(\002\022\016\n\006w_h_01\030\002 \002(\002\022\016\n\006w_h_10\030\003 \002"
      "(\002\022\016\n\006w_h_11\030\004 \002(\002\022\013\n\003b_0\030\005 \002(\002\022\013\n\003b_1\030\006"
      " \002(\002\022\016\n\006w_o_00\030\007 \002(\002\022\016\n\006w_o_01\030\010 \002(\002\022\016\n\006"
      "w_o_10\030\t \002(\002\022\016\n\006w_o_11\030\n \002(\002\"F\n\020Iteratio"
      "nWeights\022\021\n\titeration\030\001 \002(\005\022\037\n\007weights\030\002"
      " \002(\0132\016.yantk.Weights\"E\n\017TrainingWeights\022"
      "2\n\021iteration_weights\030\001 \003(\0132\027.yantk.Itera"
      "tionWeights"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weights.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_weights_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weights::kWH00FieldNumber;
const int Weights::kWH01FieldNumber;
const int Weights::kWH10FieldNumber;
const int Weights::kWH11FieldNumber;
const int Weights::kB0FieldNumber;
const int Weights::kB1FieldNumber;
const int Weights::kWO00FieldNumber;
const int Weights::kWO01FieldNumber;
const int Weights::kWO10FieldNumber;
const int Weights::kWO11FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weights::Weights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weights_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yantk.Weights)
}
Weights::Weights(const Weights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_h_00_, &from.w_h_00_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_o_11_) -
    reinterpret_cast<char*>(&w_h_00_)) + sizeof(w_o_11_));
  // @@protoc_insertion_point(copy_constructor:yantk.Weights)
}

void Weights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&w_h_00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_o_11_) -
      reinterpret_cast<char*>(&w_h_00_)) + sizeof(w_o_11_));
}

Weights::~Weights() {
  // @@protoc_insertion_point(destructor:yantk.Weights)
  SharedDtor();
}

void Weights::SharedDtor() {
}

void Weights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weights::descriptor() {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weights& Weights::default_instance() {
  protobuf_weights_2eproto::InitDefaults();
  return *internal_default_instance();
}

Weights* Weights::New(::google::protobuf::Arena* arena) const {
  Weights* n = new Weights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Weights::Clear() {
// @@protoc_insertion_point(message_clear_start:yantk.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&w_h_00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_o_01_) -
        reinterpret_cast<char*>(&w_h_00_)) + sizeof(w_o_01_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&w_o_10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_o_11_) -
        reinterpret_cast<char*>(&w_o_10_)) + sizeof(w_o_11_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yantk.Weights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float w_h_00 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_w_h_00();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_h_00_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_h_01 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_w_h_01();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_h_01_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_h_10 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_w_h_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_h_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_h_11 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_w_h_11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_h_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float b_0 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_b_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float b_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_b_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_o_00 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_w_o_00();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_o_00_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_o_01 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_w_o_01();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_o_01_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_o_10 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_w_o_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_o_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w_o_11 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_w_o_11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_o_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yantk.Weights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yantk.Weights)
  return false;
#undef DO_
}

void Weights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yantk.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float w_h_00 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w_h_00(), output);
  }

  // required float w_h_01 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w_h_01(), output);
  }

  // required float w_h_10 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w_h_10(), output);
  }

  // required float w_h_11 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w_h_11(), output);
  }

  // required float b_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->b_0(), output);
  }

  // required float b_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->b_1(), output);
  }

  // required float w_o_00 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->w_o_00(), output);
  }

  // required float w_o_01 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->w_o_01(), output);
  }

  // required float w_o_10 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->w_o_10(), output);
  }

  // required float w_o_11 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->w_o_11(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yantk.Weights)
}

::google::protobuf::uint8* Weights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yantk.Weights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float w_h_00 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w_h_00(), target);
  }

  // required float w_h_01 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w_h_01(), target);
  }

  // required float w_h_10 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->w_h_10(), target);
  }

  // required float w_h_11 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w_h_11(), target);
  }

  // required float b_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->b_0(), target);
  }

  // required float b_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->b_1(), target);
  }

  // required float w_o_00 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->w_o_00(), target);
  }

  // required float w_o_01 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->w_o_01(), target);
  }

  // required float w_o_10 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->w_o_10(), target);
  }

  // required float w_o_11 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->w_o_11(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yantk.Weights)
  return target;
}

size_t Weights::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yantk.Weights)
  size_t total_size = 0;

  if (has_w_h_00()) {
    // required float w_h_00 = 1;
    total_size += 1 + 4;
  }

  if (has_w_h_01()) {
    // required float w_h_01 = 2;
    total_size += 1 + 4;
  }

  if (has_w_h_10()) {
    // required float w_h_10 = 3;
    total_size += 1 + 4;
  }

  if (has_w_h_11()) {
    // required float w_h_11 = 4;
    total_size += 1 + 4;
  }

  if (has_b_0()) {
    // required float b_0 = 5;
    total_size += 1 + 4;
  }

  if (has_b_1()) {
    // required float b_1 = 6;
    total_size += 1 + 4;
  }

  if (has_w_o_00()) {
    // required float w_o_00 = 7;
    total_size += 1 + 4;
  }

  if (has_w_o_01()) {
    // required float w_o_01 = 8;
    total_size += 1 + 4;
  }

  if (has_w_o_10()) {
    // required float w_o_10 = 9;
    total_size += 1 + 4;
  }

  if (has_w_o_11()) {
    // required float w_o_11 = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Weights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yantk.Weights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required float w_h_00 = 1;
    total_size += 1 + 4;

    // required float w_h_01 = 2;
    total_size += 1 + 4;

    // required float w_h_10 = 3;
    total_size += 1 + 4;

    // required float w_h_11 = 4;
    total_size += 1 + 4;

    // required float b_0 = 5;
    total_size += 1 + 4;

    // required float b_1 = 6;
    total_size += 1 + 4;

    // required float w_o_00 = 7;
    total_size += 1 + 4;

    // required float w_o_01 = 8;
    total_size += 1 + 4;

    // required float w_o_10 = 9;
    total_size += 1 + 4;

    // required float w_o_11 = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yantk.Weights)
  GOOGLE_DCHECK_NE(&from, this);
  const Weights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yantk.Weights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yantk.Weights)
    MergeFrom(*source);
  }
}

void Weights::MergeFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yantk.Weights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      w_h_00_ = from.w_h_00_;
    }
    if (cached_has_bits & 0x00000002u) {
      w_h_01_ = from.w_h_01_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_h_10_ = from.w_h_10_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_h_11_ = from.w_h_11_;
    }
    if (cached_has_bits & 0x00000010u) {
      b_0_ = from.b_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      b_1_ = from.b_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      w_o_00_ = from.w_o_00_;
    }
    if (cached_has_bits & 0x00000080u) {
      w_o_01_ = from.w_o_01_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      w_o_10_ = from.w_o_10_;
    }
    if (cached_has_bits & 0x00000200u) {
      w_o_11_ = from.w_o_11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Weights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yantk.Weights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weights::CopyFrom(const Weights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yantk.Weights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weights::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void Weights::Swap(Weights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weights::InternalSwap(Weights* other) {
  using std::swap;
  swap(w_h_00_, other->w_h_00_);
  swap(w_h_01_, other->w_h_01_);
  swap(w_h_10_, other->w_h_10_);
  swap(w_h_11_, other->w_h_11_);
  swap(b_0_, other->b_0_);
  swap(b_1_, other->b_1_);
  swap(w_o_00_, other->w_o_00_);
  swap(w_o_01_, other->w_o_01_);
  swap(w_o_10_, other->w_o_10_);
  swap(w_o_11_, other->w_o_11_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Weights::GetMetadata() const {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Weights

// required float w_h_00 = 1;
bool Weights::has_w_h_00() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Weights::set_has_w_h_00() {
  _has_bits_[0] |= 0x00000001u;
}
void Weights::clear_has_w_h_00() {
  _has_bits_[0] &= ~0x00000001u;
}
void Weights::clear_w_h_00() {
  w_h_00_ = 0;
  clear_has_w_h_00();
}
float Weights::w_h_00() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_h_00)
  return w_h_00_;
}
void Weights::set_w_h_00(float value) {
  set_has_w_h_00();
  w_h_00_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_h_00)
}

// required float w_h_01 = 2;
bool Weights::has_w_h_01() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Weights::set_has_w_h_01() {
  _has_bits_[0] |= 0x00000002u;
}
void Weights::clear_has_w_h_01() {
  _has_bits_[0] &= ~0x00000002u;
}
void Weights::clear_w_h_01() {
  w_h_01_ = 0;
  clear_has_w_h_01();
}
float Weights::w_h_01() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_h_01)
  return w_h_01_;
}
void Weights::set_w_h_01(float value) {
  set_has_w_h_01();
  w_h_01_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_h_01)
}

// required float w_h_10 = 3;
bool Weights::has_w_h_10() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Weights::set_has_w_h_10() {
  _has_bits_[0] |= 0x00000004u;
}
void Weights::clear_has_w_h_10() {
  _has_bits_[0] &= ~0x00000004u;
}
void Weights::clear_w_h_10() {
  w_h_10_ = 0;
  clear_has_w_h_10();
}
float Weights::w_h_10() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_h_10)
  return w_h_10_;
}
void Weights::set_w_h_10(float value) {
  set_has_w_h_10();
  w_h_10_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_h_10)
}

// required float w_h_11 = 4;
bool Weights::has_w_h_11() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Weights::set_has_w_h_11() {
  _has_bits_[0] |= 0x00000008u;
}
void Weights::clear_has_w_h_11() {
  _has_bits_[0] &= ~0x00000008u;
}
void Weights::clear_w_h_11() {
  w_h_11_ = 0;
  clear_has_w_h_11();
}
float Weights::w_h_11() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_h_11)
  return w_h_11_;
}
void Weights::set_w_h_11(float value) {
  set_has_w_h_11();
  w_h_11_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_h_11)
}

// required float b_0 = 5;
bool Weights::has_b_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Weights::set_has_b_0() {
  _has_bits_[0] |= 0x00000010u;
}
void Weights::clear_has_b_0() {
  _has_bits_[0] &= ~0x00000010u;
}
void Weights::clear_b_0() {
  b_0_ = 0;
  clear_has_b_0();
}
float Weights::b_0() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.b_0)
  return b_0_;
}
void Weights::set_b_0(float value) {
  set_has_b_0();
  b_0_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.b_0)
}

// required float b_1 = 6;
bool Weights::has_b_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Weights::set_has_b_1() {
  _has_bits_[0] |= 0x00000020u;
}
void Weights::clear_has_b_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void Weights::clear_b_1() {
  b_1_ = 0;
  clear_has_b_1();
}
float Weights::b_1() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.b_1)
  return b_1_;
}
void Weights::set_b_1(float value) {
  set_has_b_1();
  b_1_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.b_1)
}

// required float w_o_00 = 7;
bool Weights::has_w_o_00() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Weights::set_has_w_o_00() {
  _has_bits_[0] |= 0x00000040u;
}
void Weights::clear_has_w_o_00() {
  _has_bits_[0] &= ~0x00000040u;
}
void Weights::clear_w_o_00() {
  w_o_00_ = 0;
  clear_has_w_o_00();
}
float Weights::w_o_00() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_o_00)
  return w_o_00_;
}
void Weights::set_w_o_00(float value) {
  set_has_w_o_00();
  w_o_00_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_o_00)
}

// required float w_o_01 = 8;
bool Weights::has_w_o_01() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Weights::set_has_w_o_01() {
  _has_bits_[0] |= 0x00000080u;
}
void Weights::clear_has_w_o_01() {
  _has_bits_[0] &= ~0x00000080u;
}
void Weights::clear_w_o_01() {
  w_o_01_ = 0;
  clear_has_w_o_01();
}
float Weights::w_o_01() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_o_01)
  return w_o_01_;
}
void Weights::set_w_o_01(float value) {
  set_has_w_o_01();
  w_o_01_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_o_01)
}

// required float w_o_10 = 9;
bool Weights::has_w_o_10() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Weights::set_has_w_o_10() {
  _has_bits_[0] |= 0x00000100u;
}
void Weights::clear_has_w_o_10() {
  _has_bits_[0] &= ~0x00000100u;
}
void Weights::clear_w_o_10() {
  w_o_10_ = 0;
  clear_has_w_o_10();
}
float Weights::w_o_10() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_o_10)
  return w_o_10_;
}
void Weights::set_w_o_10(float value) {
  set_has_w_o_10();
  w_o_10_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_o_10)
}

// required float w_o_11 = 10;
bool Weights::has_w_o_11() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Weights::set_has_w_o_11() {
  _has_bits_[0] |= 0x00000200u;
}
void Weights::clear_has_w_o_11() {
  _has_bits_[0] &= ~0x00000200u;
}
void Weights::clear_w_o_11() {
  w_o_11_ = 0;
  clear_has_w_o_11();
}
float Weights::w_o_11() const {
  // @@protoc_insertion_point(field_get:yantk.Weights.w_o_11)
  return w_o_11_;
}
void Weights::set_w_o_11(float value) {
  set_has_w_o_11();
  w_o_11_ = value;
  // @@protoc_insertion_point(field_set:yantk.Weights.w_o_11)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IterationWeights::kIterationFieldNumber;
const int IterationWeights::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IterationWeights::IterationWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weights_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yantk.IterationWeights)
}
IterationWeights::IterationWeights(const IterationWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weights()) {
    weights_ = new ::yantk::Weights(*from.weights_);
  } else {
    weights_ = NULL;
  }
  iteration_ = from.iteration_;
  // @@protoc_insertion_point(copy_constructor:yantk.IterationWeights)
}

void IterationWeights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weights_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iteration_) -
      reinterpret_cast<char*>(&weights_)) + sizeof(iteration_));
}

IterationWeights::~IterationWeights() {
  // @@protoc_insertion_point(destructor:yantk.IterationWeights)
  SharedDtor();
}

void IterationWeights::SharedDtor() {
  if (this != internal_default_instance()) delete weights_;
}

void IterationWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IterationWeights::descriptor() {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IterationWeights& IterationWeights::default_instance() {
  protobuf_weights_2eproto::InitDefaults();
  return *internal_default_instance();
}

IterationWeights* IterationWeights::New(::google::protobuf::Arena* arena) const {
  IterationWeights* n = new IterationWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IterationWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:yantk.IterationWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_weights()) {
    GOOGLE_DCHECK(weights_ != NULL);
    weights_->::yantk::Weights::Clear();
  }
  iteration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IterationWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yantk.IterationWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iteration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .yantk.Weights weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yantk.IterationWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yantk.IterationWeights)
  return false;
#undef DO_
}

void IterationWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yantk.IterationWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iteration = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iteration(), output);
  }

  // required .yantk.Weights weights = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weights_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yantk.IterationWeights)
}

::google::protobuf::uint8* IterationWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yantk.IterationWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iteration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iteration(), target);
  }

  // required .yantk.Weights weights = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->weights_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yantk.IterationWeights)
  return target;
}

size_t IterationWeights::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yantk.IterationWeights)
  size_t total_size = 0;

  if (has_weights()) {
    // required .yantk.Weights weights = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weights_);
  }

  if (has_iteration()) {
    // required int32 iteration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iteration());
  }

  return total_size;
}
size_t IterationWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yantk.IterationWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .yantk.Weights weights = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weights_);

    // required int32 iteration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iteration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IterationWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yantk.IterationWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const IterationWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IterationWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yantk.IterationWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yantk.IterationWeights)
    MergeFrom(*source);
  }
}

void IterationWeights::MergeFrom(const IterationWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yantk.IterationWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weights()->::yantk::Weights::MergeFrom(from.weights());
    }
    if (cached_has_bits & 0x00000002u) {
      iteration_ = from.iteration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IterationWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yantk.IterationWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterationWeights::CopyFrom(const IterationWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yantk.IterationWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterationWeights::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_weights()) {
    if (!this->weights_->IsInitialized()) return false;
  }
  return true;
}

void IterationWeights::Swap(IterationWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterationWeights::InternalSwap(IterationWeights* other) {
  using std::swap;
  swap(weights_, other->weights_);
  swap(iteration_, other->iteration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IterationWeights::GetMetadata() const {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IterationWeights

// required int32 iteration = 1;
bool IterationWeights::has_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IterationWeights::set_has_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
void IterationWeights::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
void IterationWeights::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
::google::protobuf::int32 IterationWeights::iteration() const {
  // @@protoc_insertion_point(field_get:yantk.IterationWeights.iteration)
  return iteration_;
}
void IterationWeights::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:yantk.IterationWeights.iteration)
}

// required .yantk.Weights weights = 2;
bool IterationWeights::has_weights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IterationWeights::set_has_weights() {
  _has_bits_[0] |= 0x00000001u;
}
void IterationWeights::clear_has_weights() {
  _has_bits_[0] &= ~0x00000001u;
}
void IterationWeights::clear_weights() {
  if (weights_ != NULL) weights_->::yantk::Weights::Clear();
  clear_has_weights();
}
const ::yantk::Weights& IterationWeights::weights() const {
  const ::yantk::Weights* p = weights_;
  // @@protoc_insertion_point(field_get:yantk.IterationWeights.weights)
  return p != NULL ? *p : *reinterpret_cast<const ::yantk::Weights*>(
      &::yantk::_Weights_default_instance_);
}
::yantk::Weights* IterationWeights::mutable_weights() {
  set_has_weights();
  if (weights_ == NULL) {
    weights_ = new ::yantk::Weights;
  }
  // @@protoc_insertion_point(field_mutable:yantk.IterationWeights.weights)
  return weights_;
}
::yantk::Weights* IterationWeights::release_weights() {
  // @@protoc_insertion_point(field_release:yantk.IterationWeights.weights)
  clear_has_weights();
  ::yantk::Weights* temp = weights_;
  weights_ = NULL;
  return temp;
}
void IterationWeights::set_allocated_weights(::yantk::Weights* weights) {
  delete weights_;
  weights_ = weights;
  if (weights) {
    set_has_weights();
  } else {
    clear_has_weights();
  }
  // @@protoc_insertion_point(field_set_allocated:yantk.IterationWeights.weights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainingWeights::kIterationWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainingWeights::TrainingWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_weights_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yantk.TrainingWeights)
}
TrainingWeights::TrainingWeights(const TrainingWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      iteration_weights_(from.iteration_weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:yantk.TrainingWeights)
}

void TrainingWeights::SharedCtor() {
  _cached_size_ = 0;
}

TrainingWeights::~TrainingWeights() {
  // @@protoc_insertion_point(destructor:yantk.TrainingWeights)
  SharedDtor();
}

void TrainingWeights::SharedDtor() {
}

void TrainingWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainingWeights::descriptor() {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrainingWeights& TrainingWeights::default_instance() {
  protobuf_weights_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrainingWeights* TrainingWeights::New(::google::protobuf::Arena* arena) const {
  TrainingWeights* n = new TrainingWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainingWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:yantk.TrainingWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iteration_weights_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrainingWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yantk.TrainingWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .yantk.IterationWeights iteration_weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteration_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yantk.TrainingWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yantk.TrainingWeights)
  return false;
#undef DO_
}

void TrainingWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yantk.TrainingWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .yantk.IterationWeights iteration_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->iteration_weights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteration_weights(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yantk.TrainingWeights)
}

::google::protobuf::uint8* TrainingWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yantk.TrainingWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .yantk.IterationWeights iteration_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->iteration_weights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->iteration_weights(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yantk.TrainingWeights)
  return target;
}

size_t TrainingWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yantk.TrainingWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .yantk.IterationWeights iteration_weights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->iteration_weights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteration_weights(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainingWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yantk.TrainingWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrainingWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yantk.TrainingWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yantk.TrainingWeights)
    MergeFrom(*source);
  }
}

void TrainingWeights::MergeFrom(const TrainingWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yantk.TrainingWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iteration_weights_.MergeFrom(from.iteration_weights_);
}

void TrainingWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yantk.TrainingWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingWeights::CopyFrom(const TrainingWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yantk.TrainingWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingWeights::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->iteration_weights())) return false;
  return true;
}

void TrainingWeights::Swap(TrainingWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainingWeights::InternalSwap(TrainingWeights* other) {
  using std::swap;
  iteration_weights_.InternalSwap(&other->iteration_weights_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrainingWeights::GetMetadata() const {
  protobuf_weights_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_weights_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainingWeights

// repeated .yantk.IterationWeights iteration_weights = 1;
int TrainingWeights::iteration_weights_size() const {
  return iteration_weights_.size();
}
void TrainingWeights::clear_iteration_weights() {
  iteration_weights_.Clear();
}
const ::yantk::IterationWeights& TrainingWeights::iteration_weights(int index) const {
  // @@protoc_insertion_point(field_get:yantk.TrainingWeights.iteration_weights)
  return iteration_weights_.Get(index);
}
::yantk::IterationWeights* TrainingWeights::mutable_iteration_weights(int index) {
  // @@protoc_insertion_point(field_mutable:yantk.TrainingWeights.iteration_weights)
  return iteration_weights_.Mutable(index);
}
::yantk::IterationWeights* TrainingWeights::add_iteration_weights() {
  // @@protoc_insertion_point(field_add:yantk.TrainingWeights.iteration_weights)
  return iteration_weights_.Add();
}
::google::protobuf::RepeatedPtrField< ::yantk::IterationWeights >*
TrainingWeights::mutable_iteration_weights() {
  // @@protoc_insertion_point(field_mutable_list:yantk.TrainingWeights.iteration_weights)
  return &iteration_weights_;
}
const ::google::protobuf::RepeatedPtrField< ::yantk::IterationWeights >&
TrainingWeights::iteration_weights() const {
  // @@protoc_insertion_point(field_list:yantk.TrainingWeights.iteration_weights)
  return iteration_weights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yantk

// @@protoc_insertion_point(global_scope)
